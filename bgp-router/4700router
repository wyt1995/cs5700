#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from Trie import Trie

class Router:
    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.relations = {}
        self.sockets = {}
        self.ports = {}
        self.routing_table = Trie()
        self.history = []

        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            # Unix select system call; return a list of socket objects
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]

            for sock in socks:
                k, addr = sock.recvfrom(65535)
                srcif = None
                for ip in self.sockets:
                    if self.sockets[ip] == sock:
                        srcif = ip
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                message = json.loads(msg)
                match message["type"]:
                    case "update":
                        self.route_update(message)
                    case "withdraw":
                        self.route_withdraw(message)
                    case "data":
                        self.deliver_data(message, srcif)
                    case "dump":
                        self.dump_table(message)


    def route_update(self, msg):
        """
        Handles update message from a neighbor router, and updates the forwarding table.
        :param msg: a JSON object.
        """
        # save a copy of the announcement
        self.history.append(msg)

        # create new route entry, update forwarding table
        new_route = {
            "network": msg["msg"]["network"],
            "netmask": msg["msg"]["netmask"],
            "peer": msg["src"],
            "ASPath": msg["msg"]["ASPath"][:],
            "localpref": int(msg["msg"]["localpref"]),
            "origin": msg["msg"]["origin"],
            "selfOrigin": msg["msg"]["selfOrigin"],
        }
        self.routing_table.insert(new_route)
        self.propagate_update(msg)

    def propagate_update(self, msg):
        peer_ip = msg["src"]
        relation = self.relations[peer_ip]

        # Update received from a customer: send updates to all other neighbors
        if relation == "cust":
            forward = [ip for ip in self.relations if ip != peer_ip]
        # Update received from a peer or a provider: only send updates to your customers
        elif relation == "peer" or relation == "prov":
            forward = [ip for ip, rel in self.relations.items() if rel == "cust"]
        else:
            forward = []

        for dest in forward:
            as_path = [self.asn] + msg["msg"]["ASPath"]
            sending = {
                "src": self.our_addr(dest),
                "dst": dest,
                "type": "update",
                "msg": {
                    "network": msg["msg"]["network"],
                    "netmask": msg["msg"]["netmask"],
                    "ASPath": as_path,
                }
            }
            self.send(dest, json.dumps(sending))


    def route_withdraw(self, msg):
        pass


    def deliver_data(self, msg, srcif):
        dest_ip = msg["dst"]
        route = self.routing_table.search(dest_ip)
        if not route or not self.check_relation(srcif, route["peer"]):
            sending = {
                "src": self.our_addr(dest_ip),
                "dst": msg["src"],
                "type": "no route",
                "msg": {}
            }
            self.send(srcif, json.dumps(sending))
        else:
            sending = {
                "src": self.our_addr(dest_ip),
                "dst": dest_ip,
                "type": "data",
                "msg": msg["msg"]
            }
            self.send(route["peer"], json.dumps(sending))


    def dump_table(self, msg):
        curr_table = self.routing_table.dump()
        sending = {
            "src": self.our_addr(msg["dst"]),
            "dst": msg["src"],
            "type": "table",
            "msg": curr_table,
        }
        self.send(msg["src"], json.dumps(sending))


    def check_relation(self, src_ip, dest_ip):
        src_relation = self.relations[src_ip]
        dst_relation = self.relations[dest_ip]
        return src_relation == "cust" or dst_relation == "cust"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()

#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, threading
from dnslib import DNSRecord, DNSHeader, RR, QTYPE, RCODE
from collections import defaultdict

class Server:
    def __init__(self, root_ip, zone_file, port):
        self.root_ip = root_ip
        self.zone_file = zone_file
        self.local = defaultdict(list)
        self.cache = defaultdict(list)
        self.domain = self.authoritative_zone()
        self.lock = threading.Lock()

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(("0.0.0.0", port))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

    def authoritative_zone(self):
        domain = ""
        with open(self.zone_file, "r") as file:
            zone = file.read()
        zone = RR.fromZone(zone)
        for record in zone:
            if record.rtype == QTYPE.SOA:
                domain = record.rname
            self.local[record.rname].append(record)
        return domain

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, addr, message):
        self.socket.sendto(message.pack(), addr)

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)
        threading.Thread(target=self.handle_request, args=(data, addr)).start()

    def handle_request(self, data, addr):
        request = DNSRecord.parse(data)
        response = self.dns_resolver(request)
        if not response:
            response = request.reply()
            response.header.rcode = RCODE.SERVFAIL
        else:
            self.bailiwick_filter(request, response)
        self.send(addr, response)

    def dns_sendrecv(self, ip, query):
        retries = 6
        for i in range(retries):
            sock = None
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                sock.settimeout(1)
                sock.sendto(query.pack(), (ip, 60053))
                data, _ = sock.recvfrom(65535)
                reply = DNSRecord.parse(data)
                return reply
            except (socket.timeout, socket.error) as e:
                self.log(f"Error on attempt {i + 1}: {e}")
                time.sleep(1)
            finally:
                if sock:
                    sock.close()
        return None

    def in_authoritative_domain(self, name):
        name = str(name).rstrip(".")
        domain = str(self.domain).rstrip(".")
        return name.endswith(domain)

    def dns_resolver(self, request):
        qname = request.q.qname
        qtype = request.q.qtype
        if self.in_authoritative_domain(qname):
            response = self.local_resolver(request)
        else:
            response = self.cache_matching(qname, qtype, request)
            if not response:
                response = self.recursive_resolver(request)
                if response and response.header.rcode == RCODE.NOERROR:
                    self.cache_result(qname, qtype, response)
        return response

    def local_resolver(self, request):
        response = request.reply()
        qname = request.q.qname
        qtype = request.q.qtype
        rmatch = self.auth_matching(qname, qtype)
        if rmatch:
            for r in rmatch:
                response.add_answer(r)
                if r.rtype == QTYPE.CNAME:
                    a_records = self.auth_matching(r.rdata.label, qtype)
                    for a in a_records:
                        response.add_answer(a)
                elif r.rtype == QTYPE.NS:
                    a_records = self.auth_matching(r.rdata.label, QTYPE.A)
                    for a in a_records:
                        response.add_ar(a)
        else:
            response.header.rcode = RCODE.NXDOMAIN
        return response

    def recursive_resolver(self, request):
        response = request.reply()
        response.header.aa = 0
        qname = request.q.qname
        qtype = request.q.qtype
        answer = self.recursive_lookup(qname, qtype)
        if answer:
            for r in answer.rr:
                response.add_answer(r)
                if r.rtype == QTYPE.CNAME:
                    a_records = self.recursive_lookup(r.rdata.label, qtype)
                    for a in a_records.rr:
                        response.add_answer(a)
            for au in answer.auth:
                response.add_auth(au)
            for ar in answer.ar:
                response.add_ar(ar)
        else:
            response.header.rcode = RCODE.NOERROR
        return response

    def auth_matching(self, qname, qtype):
        if qname in self.local:
            return [r for r in self.local[qname] if r.rtype == qtype or r.rtype == QTYPE.CNAME]
        return []

    def cache_matching(self, qname, qtype, request):
        self.cache_cleanup()
        key = (qname, qtype)
        with self.lock:
            records = self.cache[key]
            if records:
                response = request.reply()
                response.header.aa = 0
                for r, expires in records:
                    if r.rtype == qtype or r.rtype == QTYPE.CNAME:
                        response.add_answer(r)
                    elif r.rtype == QTYPE.NS:
                        response.add_auth(r)
                    else:
                        response.add_ar(r)
                    r.ttl = int(expires - time.time())
                return response
        return None

    def cache_result(self, qname, qtype, response):
        key = (qname, qtype)
        with self.lock:
            t = time.time()
            records = [(r, t + r.ttl) for r in response.rr + response.auth + response.ar]
            self.cache[key].extend(records)

    def cache_cleanup(self):
        t = time.time()
        with self.lock:
            to_delete = []
            for key in self.cache:
                self.cache[key] = [(r, exp) for r, exp in self.cache[key] if exp > t]
                if not self.cache[key]:
                    to_delete.append(key)
            for key in to_delete:
                del self.cache[key]

    def recursive_lookup(self, qname, qtype):
        current = [self.root_ip]
        visited = set()
        max_depth = 10
        depth = 0
        while depth < max_depth:
            depth += 1
            for ip in current:
                if ip in visited:
                    continue
                visited.add(ip)

                # send DNS query and check the response
                query = DNSRecord.question(qname, QTYPE[qtype])
                reply = self.dns_sendrecv(ip, query)
                if not reply:
                    continue
                if reply.rr or (qtype == QTYPE.NS and reply.auth):
                    return reply

                # find ip address for the next nameserver in glue records
                ns_records = reply.auth
                glue_records = reply.ar
                next_level = []
                for ns in ns_records:
                    for ar in glue_records:
                        if ar.rname == ns.rdata.label and ar.rtype == QTYPE.A:
                            next_level.append(str(ar.rdata))
                current = next_level
        return None

    def bailiwick_filter(self, request, response):
        def checker(record):
            if record.rtype == QTYPE.CNAME or record.rtype == QTYPE.NS:
                allowed.append(str(record.rdata.label).rstrip("."))
            result = str(record.rname).rstrip(".")
            return any([result.endswith(r) for r in allowed])

        allowed = [str(request.q.qname).rstrip(".")]
        response.rr = [r for r in response.rr if checker(r)]
        response.auth = [r for r in response.auth if checker(r)]
        response.ar = [r for r in response.ar if checker(r)]

    def run(self):
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                self.recv(conn)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('root_ip', type=str, help="The IP address of the root server")
    parser.add_argument('zone', type=str, help="The zone file for this server")
    parser.add_argument('--port', type=int, help="The port this server should bind to", default=0)
    args = parser.parse_args()
    sender = Server(args.root_ip, args.zone, args.port)
    sender.run()

#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import hashlib

DATA_SIZE = 1375
TIMEOUT = 2

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.remote_host = None
        self.remote_port = None

        # flow control
        self.sequence = 0
        self.window = 8
        self.outstanding = {}

        # congestion control
        self.cwnd = 1

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        # self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error: Received response from unexpected remote; ignoring")
            return None
        else:
            # self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))

    @staticmethod
    def checksum(data):
        """
        Compute a hash value to check for data corruption.
        """
        return hashlib.md5(data.encode()).hexdigest()

    def send_packet(self, data):
        """
        Send a packet to the remote host containing the given data
        together with a header (sequence number, checksum) for error detection.
        Keep the packet for a possible retransmission.
        """
        hashcode = self.checksum(data)
        msg = {"type": "msg", "seq": self.sequence, "checksum": hashcode, "data": data}
        log = {"seq": self.sequence, "checksum": hashcode, "data": data, "time": time.time()}
        self.send(msg)
        self.outstanding[self.sequence] = log
        self.sequence += 1

    def recv_ack(self, msg):
        """
        Handles an ACK message from the remote host.
        Remove the packet that has been acknowledged.
        :param msg: the JSON packet received from the socket connection.
        """
        if not msg:
            return
        sequence = msg["seq"]
        if sequence not in self.outstanding:
            return
        del self.outstanding[sequence]

    def retransmit(self):
        """
        Retransmit all packets in the log that have exceeded the timeout.
        """
        for seq, packet in self.outstanding.items():
            elapsed = time.time() - packet["time"]
            if elapsed > TIMEOUT:
                msg = {"type": "msg", "seq": seq, "checksum": packet["checksum"], "data": packet["data"]}
                self.send(msg)
                packet["time"] = time.time()

    def run(self):
        end_file = False
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    msg = self.recv(conn)
                    self.recv_ack(msg)
                    if len(self.outstanding) < self.window:
                        self.waiting = False
                elif conn == sys.stdin and not end_file:
                    if len(self.outstanding) >= self.window:
                        self.waiting = True
                        continue
                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        self.log("All sent, waiting for ACKs")
                        end_file = True
                    else:
                        self.send_packet(data)
            self.retransmit()
            if end_file and len(self.outstanding) == 0:
                self.log("All done!")
                sys.exit(0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
